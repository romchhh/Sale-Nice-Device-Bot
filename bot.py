# -*- coding: utf-8 -*-
import os, glob, aiofiles, asyncio, shutil, io
from aiogram import Bot, Dispatcher, executor, types
from config import TOKEN, GROUP_ID, ADMIN_IDS, SESSION_NAME, API_HASH, API_ID, channels
from user.user_keyboard import main_menu, get_categories_keyboard, generate_categories_keyboard
from user.user_db import create_table, add_user, add_phone_number_to_user, add_sale
from aiogram.types import InputMediaPhoto, InputFile, InlineKeyboardMarkup, InlineKeyboardButton
from telethon.sync import TelegramClient
from admin.admin_keyboard import admin_keyboard
from admin.admin_db import get_active_users_count, get_sales_count, get_users_count
from admin.admin_func import export_database_to_excel
from aiogram.utils.exceptions import CantParseEntities




bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

item_info = {}
max_photos = 4
photo_counter = {}
description_sent = {}
next_photo_message_sent = {}


# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ /start
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    chat_id = message.chat.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    greeting_message = f"–í—ñ—Ç–∞—î–º–æ –≤–∞—Å, {first_name}!"
    create_table()
    add_user(chat_id, username, first_name, last_name)
    await check_and_delete_user_folder(message.from_user.id, chat_id)
    await bot.send_message(chat_id, greeting_message)
    await main_menu(bot, chat_id)



"""ADMIN"""
@dp.message_handler(commands=['admin'])
async def admin_panel(message: types.Message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    if user_id in ADMIN_IDS:
        await bot.send_message(chat_id, "–í–∏ —É–≤—ñ–π—à–ª–∏ –¥–æ –ø–∞–Ω–µ–ª—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=admin_keyboard)
        
@dp.message_handler(lambda message: message.text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä')
async def statistics_handler(message: types.Message):
    total_users = get_users_count()
    active_users = get_active_users_count()
    total_sales = get_sales_count()

    response_message = (
        f"üë• –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {total_users}\n"
        f"üì± –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {active_users}\n"
        f"üõçÔ∏è –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–æ–¥–∞–∂—ñ–≤: {total_sales}"
    )
    await message.answer(response_message)

@dp.message_handler(lambda message: message.text == '–í–∏–≥—Ä—É–∑–∏—Ç–∏ –±–∞–∑—É –¥–∞–Ω–∏—Ö üíæ')
async def export_database_handler(message: types.Message):
    await message.answer("–í–∏–≥—Ä—É–∂–∞—î–º–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö...")
    await export_database_to_excel(message)
    
        
@dp.message_handler(lambda message: message.text == '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é ‚óÄÔ∏è')
async def back_to_menu_handler(message: types.Message):
    await main_menu(bot, message.chat.id)

"""USER"""


client = TelegramClient(SESSION_NAME, API_ID, API_HASH)
selected_categories = {}
post_batches = {}

async def get_posts(categories, start_index, batch_size=7, download_batch_size=7, user_id=None):
    async with client:
        found_posts = []

        for channel_name in channels:
            channel_entity = await client.get_entity(channel_name)
            messages = await client.get_messages(channel_entity, limit=400)  # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

            for message in messages:
                message_text_lower = message.message.lower() if message.message else ''
                if any(category.lower() in message_text_lower for category in categories):
                    found_posts.append(message)

        # –í–∏–±–∏—Ä–∞—î–º–æ –ø–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ start_index —Ç–∞ batch_size
        end_index = start_index + batch_size
        batch = found_posts[start_index:end_index]

        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_folder = f"user_category_{user_id}"
        os.makedirs(user_folder, exist_ok=True)

        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó –ø–∞—Ä—Ç—ñ—è–º–∏
        for i in range(0, len(batch), download_batch_size):
            batch_subset = batch[i:i + download_batch_size]
            tasks = [download_photo(photo, user_folder) for photo in batch_subset if photo.photo]
            await asyncio.gather(*tasks)

        return batch, end_index

async def download_photo(message, user_folder):
    photo = message.photo
    file_path = await client.download_media(photo, file=os.path.join(user_folder, f'{photo.id}.jpg'))
    print(f'Downloaded photo: {file_path}')
    message.photo_path = file_path  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —à–ª—è—Ö –¥–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó –≤ –æ–±'—î–∫—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è


@dp.callback_query_handler(lambda call: call.data == 'search')
async def search_callback(callback_query: types.CallbackQuery):
    print("–û–±—Ä–∞–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:")
    for category in selected_categories.get(callback_query.message.chat.id, []):
        print(category)
    await bot.send_message(callback_query.message.chat.id, "–ü—Ä–æ–≤–æ–¥–∏–º–æ –ø–æ—à—É–∫ –ø–æ –∫–∞–Ω–∞–ª–∞—Ö....")

    # Initialize post batches for the current user
    post_batches[callback_query.message.chat.id] = {"posts": [], "index": 0}

    # Get the first batch of posts
    user_id = callback_query.message.chat.id
    batch, index = await get_posts(selected_categories.get(user_id, []), 0, user_id=user_id)
    post_batches[user_id]["posts"] = batch
    post_batches[user_id]["index"] = index

    if batch:
        for post in batch:
            await send_post_with_button(callback_query.message.chat.id, post)

        if len(batch) >= 7:
            await bot.send_message(callback_query.message.chat.id, "–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —â–µ 7 –æ–≥–æ–ª–æ—à–µ–Ω—å?", reply_markup=get_pagination_keyboard())
        else:
            await bot.send_message(callback_query.message.chat.id, "–¶–µ –≤—Å—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –≤ –¥–∞–Ω—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó.")
    else:
        await bot.send_message(callback_query.message.chat.id, "–ù–∞ –∂–∞–ª—å, –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

    # Clean up user-specific directory
    user_folder = f"user_category_{user_id}"
    shutil.rmtree(user_folder, ignore_errors=True)




def get_pagination_keyboard():
    keyboard = types.InlineKeyboardMarkup(one_time_keyboard=True)
    keyboard.add(types.InlineKeyboardButton(text="–¢–∞–∫ ‚úÖ", callback_data="send_more"))
    keyboard.add(types.InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –ø–æ—à—É–∫ ‚ùå", callback_data="finish_search"))
    return keyboard


async def send_post_with_button(chat_id, post):
    has_error = False

    if post.photo_path:
        with open(post.photo_path, 'rb') as photo:
            try:
                await bot.send_photo(chat_id, photo, caption=post.text, parse_mode="Markdown")
            except CantParseEntities:
                print(f"Can't parse entities in post: {post.text}")
                has_error = True
    else:
        try:
            await bot.send_message(chat_id, post.text, parse_mode="Markdown")
        except CantParseEntities:
            print(f"Can't parse entities in post: {post.text}")
            has_error = True

    if not has_error:
        await bot.send_message(chat_id, "ü§©–ó–∞—Ü—ñ–∫–∞–≤–∏–≤ –ø–æ—Å—Ç?ü§©", reply_markup=get_post_button(post))


def get_post_button(post):
    inline_keyboard = types.InlineKeyboardMarkup()
    post_link = f"https://t.me/{post.chat.username}/{post.id}"
    inline_keyboard.add(types.InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –ø–æ—Å—Ç–∞", url=post_link))
    return inline_keyboard

@dp.callback_query_handler(lambda call: call.data == 'send_more')
async def send_more_callback(callback_query: types.CallbackQuery):
    chat_id = callback_query.message.chat.id
    batch_size = 7

    if chat_id in post_batches:
        start_index = post_batches[chat_id]["index"]
        batch, index = await get_posts(selected_categories.get(chat_id, []), start_index, user_id=chat_id)

        if batch:
            post_batches[chat_id]["posts"].extend(batch)
            post_batches[chat_id]["index"] = index

            for post in batch:
                await send_post_with_button(chat_id, post)

            if len(batch) >= 7:
                await bot.send_message(chat_id, "–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —â–µ 10?", reply_markup=get_pagination_keyboard())
            else:
                await bot.send_message(chat_id, "–¶–µ –≤—Å—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –≤ –¥–∞–Ω—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó.")
        else:
            del post_batches[chat_id]
            await bot.send_message(chat_id, "–ë—ñ–ª—å—à–µ –ø–æ—Å—Ç—ñ–≤ –Ω–µ–º–∞—î.")

        user_folder = f"user_category_{chat_id}"
        shutil.rmtree(user_folder, ignore_errors=True)
    else:
        await bot.send_message(chat_id, "–ü–æ—à—É–∫ –±—É–ª–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")


@dp.callback_query_handler(lambda call: call.data == 'finish_search')
async def finish_search_callback(callback_query: types.CallbackQuery):
    chat_id = callback_query.message.chat.id
    if chat_id in post_batches:
        del post_batches[chat_id]  
        await bot.send_message(chat_id, "–ü–æ—à—É–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
        
    else:
        await bot.send_message(chat_id, "–ü–æ—à—É–∫ –±—É–ª–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
        
    user_folder = f"user_category_{chat_id}"
    shutil.rmtree(user_folder, ignore_errors=True)





@dp.message_handler(lambda message: message.text == '–§—ñ–ª—å—Ç—Äüîé')
async def filter(message: types.Message):
    if message.chat.id not in selected_categories:
        selected_categories[message.chat.id] = []
    categories_keyboard = get_categories_keyboard(selected_categories[message.chat.id])
    await bot.send_message(message.chat.id, "–í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:", reply_markup=categories_keyboard)
    
    user_id = message.chat.id  # Obtain user_id from the message object
    category_folder = f"user_category_{user_id}"
    if os.path.exists(category_folder):
        shutil.rmtree(category_folder)
    

@dp.callback_query_handler(lambda call: call.data in ['–¢–µ–ª–µ—Ñ–æ–Ω', '–ù–∞–≤—É—à–Ω–∏–∫–∏', '–ù–æ—É—Ç–±—É–∫', '–ü–ª–∞–Ω—à–µ—Ç', '–ü—Ä–∏—Å—Ç–∞–≤–∫–∞','–ì–æ–¥–∏–Ω–Ω–∏–∫–∏', '–¢–µ–ª–µ–≤—ñ–∑–æ—Ä', '–ê–∫—É—Å—Ç–∏–∫–∞', '–§–æ—Ç–æ–∞–ø–∞—Ä–∞—Ç', '–®—É—Ä—É–ø–æ–∫—Ä—É—Ç', '–ë–æ–ª–≥–∞—Ä–∫–∞', '–õ–æ–±–∑–∏–∫', '–ù–æ—É—Ç–±—É–∫', '–®–ª—ñ—Ñ—É–≤–∞—á', '–§–µ–Ω','–õ–∞–∑–µ—Ä', '–ó–≤–∞—Ä—é–≤–∞—á', '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä', '–ë–µ–Ω–∑–æ–ø–∏–ª–∞', '–ï–ª–µ–∫—Ç—Ä–æ–ø–ª–∏—Ç–∞','–ö—É—â–æ—Ä—ñ–∑', '–í–∞–≥–∏', '—ñ–≥—Ä–∞—à–∫–∏', '–ü–∏–ª–æ—Å–æ—Å', '–ü—Ä–∞—Å–∫–∞','–°—Ç–∞–π–ª–µ—Ä', '–ö–∞–≤–æ–º–æ–ª–∫–∞', '–ú—É–ª—å—Ç–∏–≤–∞—Ä–∫–∞', '–ë—É—Ç–µ—Ä–±—Ä–æ–¥–Ω–∏—Ü—è', '–ß–∞–π–Ω–∏–∫', '–û–±—ñ–≥—Ä—ñ–≤–∞—á'])
async def process_callback(callback_query: types.CallbackQuery):
    buy_category = callback_query.data
    if callback_query.message.chat.id not in selected_categories:
        selected_categories[callback_query.message.chat.id] = []
    if buy_category in selected_categories[callback_query.message.chat.id]:
        selected_categories[callback_query.message.chat.id].remove(buy_category)
    else:
        selected_categories[callback_query.message.chat.id].append(buy_category)
    categories_keyboard = get_categories_keyboard(selected_categories[callback_query.message.chat.id])
    if categories_keyboard != callback_query.message.reply_markup:
        await bot.edit_message_reply_markup(callback_query.message.chat.id, callback_query.message.message_id, reply_markup=categories_keyboard)


@dp.message_handler(lambda message: message.text == '–ü–∞—Ä—Ç–Ω–µ—Ä–∞–º \U0001F4E2')
async def partners(message: types.Message):
    await bot.send_message(message.chat.id, "–ó –ø—Ä–∏–≤–æ–¥—É –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞ –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å –¥–æ @Andriy1.")
    
    user_id = message.chat.id  # Obtain user_id from the message object
    category_folder = f"user_category_{user_id}"
    if os.path.exists(category_folder):
        shutil.rmtree(category_folder)
    

@dp.message_handler(lambda message: message.text == '–ü—Ä–æ–¥–∞—Ç–∏ \U0001F4B0')
async def sell(message: types.Message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(types.KeyboardButton('–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—Éüìû', request_contact=True))
    markup.add(types.KeyboardButton('üîô–ù–∞–∑–∞–¥'))

    await bot.send_message(message.chat.id, "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É, —â–æ–± –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:", reply_markup=markup)
    
    user_id = message.chat.id  # Obtain user_id from the message object
    category_folder = f"user_category_{user_id}"
    if os.path.exists(category_folder):
        shutil.rmtree(category_folder)

@dp.message_handler(content_types=['contact'])
async def contact_received(message: types.Message):
    phone_number = message.contact.phone_number
    user_id = message.from_user.id
    add_phone_number_to_user(user_id, phone_number)

    back_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    back_markup.add(types.KeyboardButton('üîô–ù–∞–∑–∞–¥'))

    markup = generate_categories_keyboard()

    item_info[str(user_id)] = {
        'phone_number': phone_number,
        'category': None,
        'description': None,
        'photos': []
    }
    photo_counter[str(user_id)] = 0  
    description_sent[str(user_id)] = False 
    next_photo_message_sent[str(user_id)] = False 

    await bot.send_message(message.chat.id, "–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.", reply_markup=back_markup)
    await bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=markup)

@dp.callback_query_handler(lambda call: call.data in ['—Ç–µ–ª–µ—Ñ–æ–Ω', '–Ω–∞–≤—É—à–Ω–∏–∫–∏', '–Ω–æ—É—Ç–±—É–∫', '–ø–ª–∞–Ω—à–µ—Ç', '–ø—Ä–∏—Å—Ç–∞–≤–∫–∞','–≥–æ–¥–∏–Ω–Ω–∏–∫', '—Ç–µ–ª–µ–≤—ñ–∑–æ—Ä', '–∞–∫—É—Å—Ç–∏–∫–∞', '—Ñ–æ—Ç–æ–∞–ø–∞—Ä–∞—Ç', '—à—É—Ä—É–ø–æ–∫—Ä—É—Ç', '–±–æ–ª–≥–∞—Ä–∫–∞', '–ª–æ–±–∑–∏–∫', '–Ω–æ—É—Ç–±—É–∫', '—à–ª—ñ—Ñ—É–≤–∞—á', '—Ñ–µ–Ω','–ª–∞–∑–µ—Ä', '–∑–≤–∞—Ä—é–≤–∞—á', '–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä', '–±–µ–Ω–∑–æ–ø–∏–ª–∞', '–µ–ª–µ–∫—Ç—Ä–æ–ø–ª–∏—Ç–∞','–∫—É—â–æ—Ä—ñ–∑', '–≤–∞–≥–∏', '—ñ–≥—Ä–∞—à–∫–∞', '–ø–∏–ª–æ—Å–æ—Å', '–ø—Ä–∞—Å–∫–∞', '—Å—Ç–∞–π–ª–µ—Ä', ' –∫–∞–≤–æ–º–æ–ª–∫–∞', '–º—É–ª—å—Ç–∏–≤–∞—Ä–∫–∞', '–±—É—Ç–µ—Ä–±—Ä–æ–¥–Ω–∏—Ü—è', '—á–∞–π–Ω–∏–∫', '–æ–±—ñ–≥—Ä—ñ–≤–∞—á', '–Ü–Ω—à–µ'])
async def category_chosen(call: types.CallbackQuery):
    sell_category = call.data
    user_id = call.message.chat.id
    item_info[str(user_id)]['category'] = sell_category

    await bot.answer_callback_query(callback_query_id=call.id, text='–û–±–µ—Ä—ñ—Ç—å —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä—É')
    chosen_category_text = f"–í–∏ –æ–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é {sell_category}\n–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä—É:"
    await bot.send_message(user_id, chosen_category_text)
    
@dp.message_handler(content_types=['photo'])
async def photo_received(message: types.Message):
    user_id = message.chat.id
    file_id = message.photo[-1].file_id
    file_info = await bot.get_file(file_id)
    downloaded_file = await bot.download_file(file_info.file_path)

    downloaded_bytes = downloaded_file.getvalue()

    user_dir = f'user_{user_id}'
    if not os.path.exists(user_dir):
        os.makedirs(user_dir)

    file_extension = os.path.splitext(file_info.file_path)[1]
    file_name = f'{user_id}_{file_id}{file_extension}'
    file_path = os.path.join(user_dir, file_name)
    async with aiofiles.open(file_path, 'wb') as f:
        await f.write(downloaded_bytes)

    item_info[str(user_id)]['photos'].append(file_path)
    photo_counter[str(user_id)] += 1  

    if photo_counter[str(user_id)] <= max_photos and not description_sent[str(user_id)]:
        await bot.send_message(user_id, '–§–æ—Ç–æ —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ. –ù–∞–¥—ñ—à–ª—ñ—Ç—å –æ–ø–∏—Å —Ç–æ–≤–∞—Ä—É.')
        description_sent[str(user_id)] = True 

    elif photo_counter[str(user_id)] <= max_photos and description_sent[str(user_id)] and not next_photo_message_sent[str(user_id)]:
        next_photo_message_sent[str(user_id)] = True

stored_messages = {}

@dp.message_handler(lambda message: message.text != 'üîô–ù–∞–∑–∞–¥')
async def description_received(message: types.Message):
    user_id = message.chat.id
    description = message.text

    if str(user_id) not in item_info:
        item_info[str(user_id)] = {
            'phone_number': None,
            'category': None,
            'description': None,
            'photos': []
        }

    item_info[str(user_id)]['description'] = description

    if str(user_id) not in description_sent:
        description_sent[str(user_id)] = False

    if description_sent[str(user_id)]:
        if str(user_id) not in item_info:
            return

        user = await bot.get_chat(user_id)
        phone_number = item_info[str(user_id)]['phone_number']
        category = item_info[str(user_id)]['category']
        preview_message = f"<b>–û–ø–∏—Å —Ç–æ–≤–∞—Ä—É:</b> {description} \n<b>–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:</b> {category}\n<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:</b> {phone_number}\n<b>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: @</b>{user.username}"

        photo_data = []
        for photo_path in item_info[str(user_id)]['photos']:
            with open(photo_path, 'rb') as f:
                photo_data.append((f.read(), os.path.basename(photo_path)))

        if len(photo_data) == 1:
            file_obj = io.BytesIO(photo_data[0][0])
            input_file = InputFile(file_obj, filename=photo_data[0][1])
            media_group_result = await bot.send_photo(user_id, input_file, caption=preview_message, parse_mode='HTML')
        else:
            input_media_photos = []
            for i, (photo_bytes, file_name) in enumerate(photo_data):
                file_obj = io.BytesIO(photo_bytes)
                input_file = InputFile(file_obj, filename=file_name)
                if i == len(photo_data) - 1:
                    input_media_photos.append(InputMediaPhoto(media=input_file, caption=preview_message, parse_mode='HTML'))
                else:
                    input_media_photos.append(InputMediaPhoto(media=input_file))

            media_group_result = await bot.send_media_group(user_id, input_media_photos)

        keyboard = InlineKeyboardMarkup(row_width=2)
        send_button = InlineKeyboardButton("–ù–∞–¥—ñ—Å–ª–∞—Ç–∏", callback_data="send_post")
        cancel_button = InlineKeyboardButton("–°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_post")
        keyboard.add(send_button, cancel_button)

        message_sent = await bot.send_message(
            message.chat.id,
            "–í—Å–µ –≤—ñ—Ä–Ω–æ?",
            reply_markup=keyboard
        )  

        if str(user_id) in photo_counter:
            photo_counter[str(user_id)] = 0
        if str(user_id) in description_sent:
            description_sent[str(user_id)] = False
        if str(user_id) in next_photo_message_sent:
            next_photo_message_sent[str(user_id)] = False

        return message_sent.message_id

@dp.callback_query_handler(lambda query: query.data == 'send_post')
async def send_post(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    if str(user_id) not in item_info:
        return

    user_folder = f'user_{user_id}'
    photo_paths = glob.glob(f'{user_folder}/*.jpg') + glob.glob(f'{user_folder}/*.jpeg') + glob.glob(f'{user_folder}/*.png')
    photo_data = []
    for photo_path in photo_paths:
        with open(photo_path, 'rb') as f:
            photo_data.append((f.read(), os.path.basename(photo_path)))

    if not photo_data:
        await bot.send_message(callback_query.from_user.id, "–£ –≤–∞—Å –Ω–µ–º–∞—î —Ñ–æ—Ç–æ –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è.")
        return

    user = await bot.get_chat(user_id)
    phone_number = item_info[str(user_id)]['phone_number']
    category = item_info[str(user_id)]['category']
    description = item_info[str(user_id)]['description']
    preview_message = f"<b>–û–ø–∏—Å —Ç–æ–≤–∞—Ä—É:</b> {description} \n<b>–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:</b> {category}\n<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:</b> {phone_number}\n<b>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: @</b>{user.username}\n\n\n<em>–®—É–∫–∞—î—Ç–µ –∑—Ä—É—á–Ω–∏–π —Å–ø–æ—Å—ñ–± –ø—Ä–æ–¥–∞—Ç–∏ –Ω–µ–ø–æ—Ç—Ä—ñ–±–Ω–∏–π –¥–µ–≤–∞–π—Å?</em> –ü–µ—Ä–µ–π–¥—ñ—Ç—å –∑–∞ <a href='https://t.me/SaleNiceDeviceBot'><u>–ø–æ—Å–∏–ª–∞–Ω–Ω—è–º</u></a> —ñ –¥—ñ–∑–Ω–∞–π—Ç–µ—Å—è, —è–∫ –ø—Ä–æ—Å—Ç–æ —Ç–∞ —à–≤–∏–¥–∫–æ –∑–Ω–∞–π—Ç–∏ –ø–æ–∫—É–ø—Ü—è –¥–ª—è –≤–∞—à–æ–≥–æ –ø—Ä–∏—Å—Ç—Ä–æ—é."


    channel_message = "üîù üîù üîù"
    

    input_media_photos = []
    if len(photo_data) == 1:
        file_obj = io.BytesIO(photo_data[0][0])
        input_file = InputFile(file_obj, filename=photo_data[0][1])
        
        await bot.send_message(GROUP_ID, channel_message, parse_mode='HTML')
        media_group_result = await bot.send_photo(GROUP_ID, input_file, caption=preview_message, parse_mode='HTML')
    else:
        input_media_photos = []
        for i, (photo_bytes, file_name) in enumerate(photo_data):
            file_obj = io.BytesIO(photo_bytes)
            input_file = InputFile(file_obj, filename=file_name)
            if i == len(photo_data) - 1:
                input_media_photos.append(InputMediaPhoto(media=input_file, caption=preview_message, parse_mode='HTML'))
            else:
                input_media_photos.append(InputMediaPhoto(media=input_file))
                
        await bot.send_message(GROUP_ID, channel_message, parse_mode='HTML')
        media_group_result = await bot.send_media_group(GROUP_ID, input_media_photos)

    keyboard_markup = InlineKeyboardMarkup()
    keyboard_markup.add(InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç–∏ –ø—Ä–æ–¥–∞–≤—Ü—é", url=f"https://t.me/{user.username}"))
    await bot.send_message(GROUP_ID, "ü§©–ó–∞—Ü—ñ–∫–∞–≤–∏–ª–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è?ü§©", reply_markup=keyboard_markup)
    
    await bot.send_message(user_id, "–í–∞—à –ø–æ—Å—Ç —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!")
    await main_menu(bot, callback_query.message.chat.id)

    add_sale(
        user_id=user_id,
        phone_number=item_info[str(user_id)]['phone_number'],
        category=item_info[str(user_id)]['category'],
        description=description,
        photos=item_info[str(user_id)]['photos']
    )

    shutil.rmtree(user_folder)

    item_info[str(user_id)] = {
        'phone_number': item_info[str(user_id)]['phone_number'],
        'category': None,
        'description': None,
        'photos': []
    }

    item_info.pop(str(user_id), None)

    await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
    await bot.edit_message_reply_markup(callback_query.message.chat.id, callback_query.message.message_id)

    
@dp.callback_query_handler(lambda query: query.data == 'cancel_post')
async def cancel_post(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    if str(user_id) not in item_info:
        return

    user_folder = f'user_{user_id}'
    shutil.rmtree(user_folder)
    item_info.pop(str(user_id), None)
    
    await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
    await bot.send_message(callback_query.message.chat.id, "–°–∫–∞—Å–æ–≤–∞–Ω–æ")
    await main_menu(bot, callback_query.message.chat.id)
    
    
async def check_and_delete_user_folder(user_id, chat_id):
    user_folder = f"user_{user_id}"
    if os.path.exists(user_folder):
        shutil.rmtree(user_folder)

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–∞–ø–∫–∏ user_category_{user_id}
    category_folder = f"user_category_{user_id}"
    if os.path.exists(category_folder):
        shutil.rmtree(category_folder)

        


@dp.message_handler(lambda message: message.text == 'üîô–ù–∞–∑–∞–¥')
async def back_to_main_menu(message: types.Message):
    user_folder = f"user_{message.from_user.id}"
    if os.path.exists(user_folder):
        shutil.rmtree(user_folder)
        await main_menu(bot, message.chat.id)
    else:
        await main_menu(bot, message.chat.id)

if __name__ == '__main__':
    try:
        client.start()
        executor.start_polling(dp, skip_updates=True)
    except (KeyboardInterrupt, SystemExit):
        client.disconnect()
    finally:
        client.disconnect()
